package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
type TempTicket struct {
	Name        string
	Description string
	Address     string
}

var userStates = make(map[int64]string)
var tempTickets = make(map[int64]*TempTicket)

var engineerIDs = []int64{
	452639799, // –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä/–∞–¥–º–∏–Ω
	// –¥—Ä—É–≥–∏–µ ID –¥–æ–±–∞–≤—å —Å—é–¥–∞
}

func notifyEngineers(bot *tgbotapi.BotAPI, msgText string, replyMarkup interface{}) {
	for _, id := range engineerIDs {
		msg := tgbotapi.NewMessage(id, msgText)
		if replyMarkup != nil {
			msg.ReplyMarkup = replyMarkup
		}
		bot.Send(msg)
	}
}

func main() {
	botToken := "8176658518:AAFTsga4y3XAmLOrpvrsDdTSX1WSjnDM3RQ"

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	//bot.Debug = true
	log.Printf("–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {

		if update.CallbackQuery != nil {
			callback := update.CallbackQuery
			data := callback.Data

			if strings.HasPrefix(data, "delete|") {
				filename := strings.TrimPrefix(data, "delete|")
				newFilename := strings.Replace(filename, ".txt", "_deleted.txt", 1)

				err := os.Rename(filename, newFilename)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É."))
				} else {
					// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
					del := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
					_, err := bot.Request(del)
					if err != nil {
						log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
					}

					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º pop-up –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
					cb := tgbotapi.NewCallback(callback.ID, "‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
					_, err = bot.Request(cb)
					if err != nil {
						log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ callback:", err)
					}

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º
					ticketID := strings.Split(strings.TrimPrefix(filename, "zayavka_"), "_")[0]
					adminMsg := fmt.Sprintf("‚ùó –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–∏–ª –∑–∞—è–≤–∫—É ‚Ññ%s", ticketID)
					notifyEngineers(bot, adminMsg, nil)
				}
			}

			continue // –≤–∞–∂–Ω–æ!
		}

		// 2. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		if update.Message == nil {
			continue
		}

		userID := update.Message.From.ID
		text := update.Message.Text

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
				msg.ReplyMarkup = mainMenuKeyboard()
				bot.Send(msg)
				userStates[userID] = ""
			}
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		switch userStates[userID] {
		case "awaiting_name":
			tempTickets[userID] = &TempTicket{}
			tempTickets[userID].Name = text
			userStates[userID] = "awaiting_description"
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:"))

		case "awaiting_description":
			if tempTickets[userID] == nil {
				tempTickets[userID] = &TempTicket{}
			}
			tempTickets[userID].Description = text
			userStates[userID] = "awaiting_address"
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ—Ö–Ω–∏–∫–∞:"))

		case "awaiting_address":
			tempTickets[userID].Address = text
			userStates[userID] = ""
			ticket, ok := tempTickets[userID]
			if !ok || ticket == nil {
				log.Println("‚ùó –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ tempTickets")
				continue
			}
			delete(tempTickets, userID)

			from := update.Message.From
			username := from.UserName
			if username == "" {
				username = "–ë–µ–∑ username"
			}

			// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
			now := time.Now()
			ticketID := now.Format("20060102150405") // —Å–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ –¥–∞—Ç–µ/–≤—Ä–µ–º–µ–Ω–∏

			fileName := fmt.Sprintf("zayavka_%s_%d.txt", ticketID, from.ID)

			fileContent := fmt.Sprintf(
				"–ó–∞—è–≤–∫–∞ –æ—Ç @%s (ID %d)\n–î–∞—Ç–∞: %s\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n%s\n\n–ê–¥—Ä–µ—Å:\n%s\n",
				username,
				from.ID,
				now.Format("02.01.2006 15:04"),
				ticket.Description,
				ticket.Address,
			)
			err := os.WriteFile(fileName, []byte(fileContent), 0644)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª:", err)
			}

			// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
			confirm := fmt.Sprintf("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nüìã –û–ø–∏—Å–∞–Ω–∏–µ: %s\nüìç –ê–¥—Ä–µ—Å: %s", ticket.Description, ticket.Address)
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, confirm))
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: /start"))

			// ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–≤—è–∑–∞—Ç—å—Å—è"
			adminMsg := fmt.Sprintf(
				"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ%s:\n\nüë§ %s\nüìã %s\nüìç %s",
				ticketID,
				ticket.Name,
				ticket.Description,
				ticket.Address,
			)

			var replyMarkup tgbotapi.InlineKeyboardMarkup
			if username != "–ë–µ–∑ username" {
				contactURL := fmt.Sprintf("https://t.me/%s", username)
				replyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonURL("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", contactURL),
					),
				)
			}

			notifyEngineers(bot, adminMsg, replyMarkup)

		default:
			switch text {
			case "üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
				userStates[userID] = "awaiting_name"
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"))

			case "üóÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏":
				pattern := fmt.Sprintf("zayavka_*_%d.txt", userID)
				files, err := filepath.Glob(pattern)
				if err != nil || len(files) == 0 {
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–æ–∫."))
					break
				}

				for _, file := range files {
					if strings.Contains(file, "_deleted") {
						continue // ‚ùå –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–¥–∞–ª—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É
					}

					contentBytes, err := os.ReadFile(file)
					if err != nil {
						log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", err)
						continue
					}

					content := string(contentBytes)
					description := extractBetween(content, "–û–ø–∏—Å–∞–Ω–∏–µ:\n", "\n\n–ê–¥—Ä–µ—Å:")
					address := extractAfter(content, "–ê–¥—Ä–µ—Å:\n")

					short := fmt.Sprintf("üìã %s\nüìç %s", description, address)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, short)
					callbackData := fmt.Sprintf("delete|%s", filepath.Base(file)) // —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
					msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
						tgbotapi.NewInlineKeyboardRow(
							tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å", callbackData),
						),
					)
					bot.Send(msg)
				}

			case "‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∏–Ω–∂–µ–Ω–µ—Ä–∞":
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏."))

			default:
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ /start."))
			}
		}
	}
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
func mainMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üóÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏"),
			tgbotapi.NewKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∏–Ω–∂–µ–Ω–µ—Ä–∞"),
		),
	)
	keyboard.ResizeKeyboard = true
	return keyboard
}

func extractBetween(text, start, end string) string {
	s := strings.Index(text, start)
	if s == -1 {
		return ""
	}
	s += len(start)
	e := strings.Index(text[s:], end)
	if e == -1 {
		return ""
	}
	return strings.TrimSpace(text[s : s+e])
}

func extractAfter(text, start string) string {
	s := strings.Index(text, start)
	if s == -1 {
		return ""
	}
	s += len(start)
	return strings.TrimSpace(text[s:])
}
