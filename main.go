package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
type TempTicket struct {
	Name        string
	Description string
	Address     string
}

var userStates = make(map[int64]string)
var tempTickets = make(map[int64]*TempTicket)

var engineerIDs = []int64{
	//452639799,
	//1222964929, // –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä/–∞–¥–º–∏–Ω
	// –¥—Ä—É–≥–∏–µ ID –¥–æ–±–∞–≤—å —Å—é–¥–∞
}

func notifyEngineers(bot *tgbotapi.BotAPI, msgText string, replyMarkup interface{}) {
	for _, id := range engineerIDs {
		msg := tgbotapi.NewMessage(id, msgText)
		if replyMarkup != nil {
			msg.ReplyMarkup = replyMarkup
		}
		bot.Send(msg)
	}
}

func main() {
	botToken := "8176658518:AAFTsga4y3XAmLOrpvrsDdTSX1WSjnDM3RQ"

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	//bot.Debug = true
	log.Printf("–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {

		if update.CallbackQuery != nil {
			callback := update.CallbackQuery
			data := callback.Data
			userID := callback.From.ID

			if strings.HasPrefix(userStates[userID], "awaiting_review_done_") {
				filename := strings.TrimPrefix(userStates[userID], "awaiting_review_done_")
				userStates[userID] = ""

				parts := strings.Split(filename, "_")
				ticketID := parts[1]
				engineerID := parts[2]

				clientUsername := update.Message.From.UserName
				if clientUsername == "" {
					clientUsername = fmt.Sprintf("%d", userID)
				}
				text := update.Message.Text
				reviewLine := fmt.Sprintf(
					"–í–´–ü–û–õ–ù–ï–ù–û | –ó–∞—è–≤–∫–∞: %s | –ö–ª–∏–µ–Ω—Ç: %s | –ò–Ω–∂–µ–Ω–µ—Ä: %s | –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s\n",
					ticketID, clientUsername, engineerID, text,
				)
				f, err := os.OpenFile("reviews_done.txt", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644)
				if err == nil {
					f.WriteString(reviewLine)
					f.Close()
				}
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"))
				continue
			}

			if strings.HasPrefix(data, "review|") {
				filename := strings.TrimPrefix(data, "review|")
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ userStates[userID] —á—Ç–æ –∂–¥–µ–º –æ—Ç–∑—ã–≤ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ
				userStates[callback.From.ID] = "awaiting_review_" + filename
				// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
				del := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
				bot.Request(del)
				// –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
				bot.Send(tgbotapi.NewMessage(callback.From.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ–± –∏–Ω–∂–µ–Ω–µ—Ä–µ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ:"))
				// Pop-up
				cb := tgbotapi.NewCallback(callback.ID, "–û–∂–∏–¥–∞–µ–º –≤–∞—à –æ—Ç–∑—ã–≤")
				bot.Request(cb)
				continue
			}

			if strings.HasPrefix(data, "done|") {
				filename := strings.TrimPrefix(data, "done|")
				newFilename := strings.Replace(filename, ".txt", "_done.txt", 1)
				err := os.Rename(filename, newFilename)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É."))
				} else {
					// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
					del := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
					bot.Request(del)
					// Pop-up
					cb := tgbotapi.NewCallback(callback.ID, "‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤.")
					bot.Request(cb)
					// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º
					ticketID := strings.Split(strings.TrimPrefix(filename, "zayavka_"), "_")[0]
					msg := fmt.Sprintf("‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ%s –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", ticketID)
					notifyEngineers(bot, msg, nil)
					// --- –ñ–¥—ë–º –æ—Ç–∑—ã–≤ ---
					nameParts := strings.Split(filename, "_")
					if len(nameParts) >= 4 {
						clientID, err := strconv.ParseInt(nameParts[3], 10, 64)
						if err == nil {
							userStates[clientID] = "awaiting_review_done_" + filename
							bot.Send(tgbotapi.NewMessage(clientID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ–± –∏–Ω–∂–µ–Ω–µ—Ä–µ –ø–æ –≤–∞—à–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ:"))
						}
					}
				}
				continue
			}

			if strings.HasPrefix(data, "delete|") {
				filename := strings.TrimPrefix(data, "delete|")
				// –ó–¥–µ—Å—å —É–¥–∞–ª—è–µ—à—å –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—à—å —Ñ–∞–π–ª:
				newFilename := strings.Replace(filename, ".txt", "_deleted.txt", 1)
				err := os.Rename(filename, newFilename)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É."))
				} else {
					// –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
					del := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
					bot.Request(del)
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º pop-up –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
					cb := tgbotapi.NewCallback(callback.ID, "‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
					bot.Request(cb)
					// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º
					ticketID := strings.Split(strings.TrimPrefix(filename, "zayavka_"), "_")[0]
					adminMsg := fmt.Sprintf("‚ùó –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–∏–ª –∑–∞—è–≤–∫—É ‚Ññ%s", ticketID)
					notifyEngineers(bot, adminMsg, nil)
				}
				continue
			}

			if strings.HasPrefix(data, "take|") {
				ticketID := strings.TrimPrefix(data, "take|")
				files, _ := filepath.Glob(fmt.Sprintf("zayavka_%s_*.txt", ticketID))
				if len(files) == 0 {
					bot.Send(tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."))
					continue
				}
				oldName := files[0]
				if strings.Contains(oldName, "_taken_") {
					// –£–∂–µ –∑–∞–Ω—è—Ç–æ ‚Äî —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –ø–æ–ø–∞–ø
					del := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
					bot.Request(del)
					cb := tgbotapi.NewCallback(callback.ID, "‚õî –ó–∞—è–≤–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞ –¥—Ä—É–≥–∏–º –∏–Ω–∂–µ–Ω–µ—Ä–æ–º")
					bot.Request(cb)
					continue
				}
				from := callback.From
				username := from.UserName
				if username == "" {
					username = "–∏–Ω–∂–µ–Ω–µ—Ä –±–µ–∑ username"
				}
				newName := strings.Replace(oldName, ".txt", fmt.Sprintf("_taken_%d.txt", from.ID), 1)
				_ = os.Rename(oldName, newName)

				// –ß–∏—Ç–∞–µ–º username –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∑–∞—è–≤–∫–∏
				content, _ := os.ReadFile(newName)
				clientUsername := extractBetween(string(content), "–æ—Ç @", " (ID ")
				if clientUsername == "" || clientUsername == "–ë–µ–∑ username" {
					clientUsername = "(–Ω–µ—Ç username)"
				}

				// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–Ω–∂–µ–Ω–µ—Ä–∞–º
				msg := fmt.Sprintf("üõ† –ó–∞—è–≤–∫—É ‚Ññ%s –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –∏–Ω–∂–µ–Ω–µ—Ä @%s", ticketID, username)
				notifyEngineers(bot, msg, nil)

				// –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–µ–≥–æ—Å—è
				del := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
				bot.Request(del)

				cb := tgbotapi.NewCallback(callback.ID, "–í—ã –≤–∑—è–ª–∏ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É")
				bot.Request(cb)

				// –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∏–Ω–∂–µ–Ω–µ—Ä–∞ –≤ —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —Å—Å—ã–ª–∫—É)
				if clientUsername != "(–Ω–µ—Ç username)" {
					contactURL := fmt.Sprintf("https://t.me/%s", clientUsername)
					linkMsg := fmt.Sprintf("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º: @%s\n%s", clientUsername, contactURL)
					bot.Send(tgbotapi.NewMessage(callback.From.ID, linkMsg))
				}
				continue
			}

			continue // –≤–∞–∂–Ω–æ!
		}

		// 2. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		if update.Message == nil {
			continue
		}

		userID := update.Message.From.ID
		text := update.Message.Text

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
				msg.ReplyMarkup = mainMenuKeyboard()
				bot.Send(msg)
				userStates[userID] = ""
			}
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		switch userStates[userID] {
		case "awaiting_name":
			tempTickets[userID] = &TempTicket{}
			tempTickets[userID].Name = text
			userStates[userID] = "awaiting_description"
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:"))

		case "awaiting_description":
			if tempTickets[userID] == nil {
				tempTickets[userID] = &TempTicket{}
			}
			tempTickets[userID].Description = text
			userStates[userID] = "awaiting_address"
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ—Ö–Ω–∏–∫–∞:"))

		case "awaiting_address":
			tempTickets[userID].Address = text
			userStates[userID] = ""
			ticket, ok := tempTickets[userID]
			if !ok || ticket == nil {
				log.Println("‚ùó –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ tempTickets")
				continue
			}
			delete(tempTickets, userID)

			from := update.Message.From
			username := from.UserName
			if username == "" {
				username = "–ë–µ–∑ username"
			}

			// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
			now := time.Now()
			ticketID := now.Format("20060102150405") // —Å–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ –¥–∞—Ç–µ/–≤—Ä–µ–º–µ–Ω–∏

			fileName := fmt.Sprintf("zayavka_%s_%d.txt", ticketID, from.ID)

			fileContent := fmt.Sprintf(
				"–ó–∞—è–≤–∫–∞ –æ—Ç @%s (ID %d)\n–î–∞—Ç–∞: %s\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n%s\n\n–ê–¥—Ä–µ—Å:\n%s\n",
				username,
				from.ID,
				now.Format("02.01.2006 15:04"),
				ticket.Description,
				ticket.Address,
			)
			err := os.WriteFile(fileName, []byte(fileContent), 0644)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª:", err)
			}

			// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
			confirm := fmt.Sprintf("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nüìã –û–ø–∏—Å–∞–Ω–∏–µ: %s\nüìç –ê–¥—Ä–µ—Å: %s", ticket.Description, ticket.Address)
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, confirm))
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: /start"))

			// ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–≤—è–∑–∞—Ç—å—Å—è"
			adminMsg := fmt.Sprintf(
				"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ%s:\n\nüë§ %s\nüìã %s\nüìç %s",
				ticketID,
				ticket.Name,
				ticket.Description,
				ticket.Address,
			)

			replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üõ† –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", fmt.Sprintf("take|%s", ticketID)),
				),
			)

			notifyEngineers(bot, adminMsg, replyMarkup)

		default:
			if strings.HasPrefix(userStates[userID], "awaiting_review_done_") {
				filename := strings.TrimPrefix(userStates[userID], "awaiting_review_done_")
				userStates[userID] = "" // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

				// –î–æ—Å—Ç–∞–µ–º –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, id –∏–Ω–∂–µ–Ω–µ—Ä–∞)
				parts := strings.Split(filename, "_")
				ticketID := parts[1]
				engineerID := parts[2]

				clientUsername := update.Message.From.UserName
				if clientUsername == "" {
					clientUsername = fmt.Sprintf("%d", userID)
				}

				// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤
				reviewLine := fmt.Sprintf(
					"–í–´–ü–û–õ–ù–ï–ù–û | –ó–∞—è–≤–∫–∞: %s | –ö–ª–∏–µ–Ω—Ç: %s | –ò–Ω–∂–µ–Ω–µ—Ä: %s | –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s\n",
					ticketID, clientUsername, engineerID, text,
				)
				f, err := os.OpenFile("reviews_done.txt", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644)
				if err == nil {
					f.WriteString(reviewLine)
					f.Close()
				}
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏–Ω—è—Ç."))
				break
			}
			// --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–∂–∏–¥–∞–µ–º –æ—Ç–∑—ã–≤? ---
			if strings.HasPrefix(userStates[userID], "awaiting_review_") {
				filename := strings.TrimPrefix(userStates[userID], "awaiting_review_")
				userStates[userID] = "" // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

				// –î–æ—Å—Ç–∞–µ–º –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, id –∏–Ω–∂–µ–Ω–µ—Ä–∞)
				parts := strings.Split(filename, "_")
				ticketID := parts[1]
				engineerID := parts[2]

				clientUsername := update.Message.From.UserName
				if clientUsername == "" {
					clientUsername = fmt.Sprintf("%d", userID)
				}

				// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤
				reviewLine := fmt.Sprintf(
					"–ù–ï –í–´–ü–û–õ–ù–ï–ù–û | –ó–∞—è–≤–∫–∞: %s | –ö–ª–∏–µ–Ω—Ç: %s | –ò–Ω–∂–µ–Ω–µ—Ä: %s | –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s\n",
					ticketID, clientUsername, engineerID, text,
				)
				f, err := os.OpenFile("reviews.txt", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644)
				if err == nil {
					f.WriteString(reviewLine)
					f.Close()
				}
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏–Ω—è—Ç."))
				break
			}

			switch text {
			case "üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
				userStates[userID] = "awaiting_name"
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"))

			case "üóÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏":
				pattern := fmt.Sprintf("zayavka_*_%d*.txt", userID)
				files, err := filepath.Glob(pattern)
				if err != nil || len(files) == 0 {
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–æ–∫."))
					break
				}

				shown := 0
				for _, file := range files {
					if strings.Contains(file, "_deleted") || strings.Contains(file, "_done") {
						continue
					}

					contentBytes, err := os.ReadFile(file)
					if err != nil {
						log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", err)
						continue
					}

					content := string(contentBytes)
					description := extractBetween(content, "–û–ø–∏—Å–∞–Ω–∏–µ:\n", "\n\n–ê–¥—Ä–µ—Å:")
					address := extractAfter(content, "–ê–¥—Ä–µ—Å:\n")

					short := fmt.Sprintf("üìã %s\nüìç %s", description, address)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, short)

					isClient := strings.Contains(file, fmt.Sprintf("_%d", userID))             // –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —ç—Ç–∏–º —é–∑–µ—Ä–æ–º?
					isEngineer := strings.Contains(file, fmt.Sprintf("_taken_%d.txt", userID)) // –∑–∞—è–≤–∫—É –≤–∑—è–ª —ç—Ç–æ—Ç –∏–Ω–∂–µ–Ω–µ—Ä?

					isTaken := strings.Contains(file, "_taken_")

					if isClient && !isTaken {
						// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –µ—â—ë –Ω–µ –≤ —Ä–∞–±–æ—Ç–µ
						callbackData := fmt.Sprintf("delete|%s", filepath.Base(file))
						msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
							tgbotapi.NewInlineKeyboardRow(
								tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å", callbackData),
							),
						)
					} else if isClient && isTaken {
						// –ó–∞—è–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ, –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, —Å—Ç–∞—Ç—É—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
						short += "\n\n‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–∂–µ–Ω–µ—Ä–æ–º."
						msg.Text = short
					} else if isEngineer {
						// –ó–∞—è–≤–∫–∞, –∫–æ—Ç–æ—Ä—É—é –∏–Ω–∂–µ–Ω–µ—Ä –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É: –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
						short += "\n\nüì¢ –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —Å–µ–π—á–∞—Å —É –≤–∞—Å –≤ —Ä–∞–±–æ—Ç–µ."
						msg.Text = short
					}

					bot.Send(msg)
					shown++
				}

				if shown == 0 {
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫."))
				}
				break

			case "‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∏–Ω–∂–µ–Ω–µ—Ä–∞":
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏."))

			default:
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ /start."))
			}
		}
	}
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
func mainMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üóÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏"),
		),
	)
	keyboard.ResizeKeyboard = true
	return keyboard
}

func extractBetween(text, start, end string) string {
	s := strings.Index(text, start)
	if s == -1 {
		return ""
	}
	s += len(start)
	e := strings.Index(text[s:], end)
	if e == -1 {
		return ""
	}
	return strings.TrimSpace(text[s : s+e])
}

func extractAfter(text, start string) string {
	s := strings.Index(text, start)
	if s == -1 {
		return ""
	}
	s += len(start)
	return strings.TrimSpace(text[s:])
}
